{
  "name": "Agente-NF-Final",
  "nodes": [
    {
      "parameters": {
        "url": "https://github.com/rogerdjerowd/I2A2/raw/main/202401_NFs.zip",
        "responseFormat": "file",
        "options": {}
      },
      "id": "5a269879-0805-45b3-a351-dd778fbb372b",
      "name": "Baixar ZIP GitHub",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -220,
        1320
      ]
    },
    {
      "parameters": {},
      "id": "4716efce-2934-437b-b131-e6e0abf73a42",
      "name": "Descompactar ZIP",
      "type": "n8n-nodes-base.compression",
      "typeVersion": 1,
      "position": [
        -20,
        1320
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"message\": \"{{ $node[\\\"OpenAI\\\"].json.choices[0].message.content }}\"\n}\n",
        "options": {}
      },
      "id": "8e9aa95d-3553-406a-9ce2-f93e397a4f83",
      "name": "Resposta para Usu√°rio",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        780,
        1320
      ]
    },
    {
      "parameters": {
        "public": true,
        "initialMessages": "üßæ **Bem-vindo ao Agente NFe!**\n\nSou especialista em an√°lise de Notas Fiscais Eletr√¥nicas. Posso ajudar voc√™ com:\n\n- üìä **An√°lise de fornecedores e faturamento**\n- üì¶ **Volumes e quantidades de produtos** \n- üí∞ **Valores totais e m√©dias**\n- üîç **Detec√ß√£o de inconsist√™ncias fiscais**\n\n**Exemplos de perguntas:**\n- \"Qual fornecedor teve maior faturamento?\"\n- \"Quantas notas fiscais foram emitidas?\"\n- \"Qual produto teve maior volume de vendas?\"\n\nO que voc√™ gostaria de saber sobre os documentos fiscais?",
        "options": {
          "inputPlaceholder": "Digite sua pergunta sobre as NFe...",
          "subtitle": "An√°lise Inteligente de Documentos Fiscais",
          "title": "üßæ Agente NFe"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -460,
        1320
      ],
      "id": "203cabff-df19-4b97-bf4d-a378c9d5df6e",
      "name": "When chat message received",
      "webhookId": "7d6d8aca-be3c-417b-8254-6e3d18906261"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4-turbo",
          "mode": "list",
          "cachedResultName": "GPT-4-TURBO"
        },
        "messages": {
          "values": [
            {
              "content": "={{ $json.messages[0].content }}",
              "role": "=system"
            },
            {
              "content": "={{ $json.messages[1].content }}"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        380,
        1320
      ],
      "id": "67513d5e-1082-4d61-8a08-3154094bc991",
      "name": "OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "AZIyNeazCJhB4oPY",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Este n√≥ espera que 'items' contenha os arquivos bin√°rios descompactados (cabe√ßalho e itens).\n// E precisa capturar o chatInput do n√≥ 'When chat message received'.\n\nlet headerCsvContent = '';\nlet itemsCsvContent = '';\nlet chatInput = '';\n\n// 1. Encontrar o chatInput do n√≥ inicial\n// Acessa diretamente o chatInput do n√≥ 'When chat message received' via a vari√°vel global $node.\n// Esta √© a forma mais robusta quando this.getInputData() n√£o est√° dispon√≠vel.\nif ($node && $node[\"When chat message received\"] && $node[\"When chat message received\"].json && $node[\"When chat message received\"].json.chatInput) {\n    chatInput = $node[\"When chat message received\"].json.chatInput;\n} else {\n    // Fallback ou mensagem de erro se o chatInput n√£o for encontrado.\n    console.error(\"Erro: chatInput do n√≥ 'When chat message received' n√£o encontrado ou a estrutura esperada est√° ausente.\");\n    chatInput = \"Pergunta n√£o informada ou vazia\"; // Definir um valor padr√£o para evitar erros no prompt\n}\n\n// 2. Extrair o conte√∫do dos arquivos CSV bin√°rios\n// O 'items' aqui se refere aos itens que v√™m do n√≥ 'Descompactar ZIP'.\nfor (const item of items) {\n    // Verifica se √© um arquivo bin√°rio e qual seu nome\n    if (item.binary && Object.keys(item.binary).length > 0) {\n        const fileKey = Object.keys(item.binary)[0]; // Pega a primeira (e geralmente √∫nica) chave do objeto bin√°rio\n        const fileData = item.binary[fileKey].data; // Pega o conte√∫do base64\n\n        // Decodifica de base64 para string\n        const decodedContent = Buffer.from(fileData, 'base64').toString('utf8');\n\n        // Assumimos que 'file_0' e 'file_1' s√£o os nomes das chaves dos arquivos bin√°rios descompactados.\n        // Se seus arquivos descompactados tiverem nomes diferentes no output do Descompactar ZIP,\n        // voc√™ precisar√° ajustar 'file_0' e 'file_1' aqui.\n        if (fileKey.includes('file_0')) { // Assumindo 'file_0' para o cabe√ßalho (ou o primeiro arquivo)\n            headerCsvContent = decodedContent;\n        } else if (fileKey.includes('file_1')) { // Assumindo 'file_1' para os itens (ou o segundo arquivo)\n            itemsCsvContent = decodedContent;\n        }\n    }\n}\n\n// 3. Formatar os dados para o prompt\n// Garantindo que os dados do cabe√ßalho e itens sejam inclu√≠dos mesmo se vazios.\n// Isso evita que o prompt fique com \"undefined\" ou falhe se um CSV estiver vazio.\nconst formattedCsv = `Dados do cabe√ßalho:\\n${headerCsvContent || 'Nenhum dado de cabe√ßalho encontrado.'}\\n\\nDados dos itens:\\n${itemsCsvContent || 'Nenhum dado de itens encontrado.'}`;\n\n// 4. Construir o prompt final para a LLM\nconst systemPrompt = \"Voc√™ √© um assistente que responde perguntas com base nos dados de notas fiscais fornecidos. Se a resposta n√£o puder ser encontrada nos dados, diga que a informa√ß√£o n√£o est√° dispon√≠vel.\";\n\nconst userPrompt = `Analise os dados CSV de nota fiscal a seguir:\n${formattedCsv}\n\nCom base APENAS nos dados fornecidos acima, responda EXATAMENTE √† seguinte pergunta do usu√°rio:\n${chatInput}`;\n\n// Retorna a estrutura que o n√≥ OpenAI espera no formato 'messages'\n// O n√≥ OpenAI ser√° configurado para ler estas mensagens.\nreturn [{\n    json: {\n        messages: [\n            { role: \"system\", content: systemPrompt },\n            { role: \"user\", content: userPrompt }\n        ],\n        // Estes campos de depura√ß√£o s√£o √∫teis para verificar o output do n√≥ Code\n        // Eles aparecer√£o na aba 'Output' do n√≥ Code no n8n.\n        _debug_chatInput: chatInput,\n        _debug_formattedCsvData: formattedCsv\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        180,
        1320
      ],
      "id": "36923d45-ac59-4cb5-95bc-4b2ace3ef93f",
      "name": "Preparar Prompt Final para LLM"
    }
  ],
  "pinData": {},
  "connections": {
    "Baixar ZIP GitHub": {
      "main": [
        [
          {
            "node": "Descompactar ZIP",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Descompactar ZIP": {
      "main": [
        [
          {
            "node": "Preparar Prompt Final para LLM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Baixar ZIP GitHub",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Resposta para Usu√°rio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preparar Prompt Final para LLM": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "161ae931-a7df-48f3-b96b-209641c8d663",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "75b7b56025604bc6e79e5d681ce98c63047c674b77700d26b2cac382e45bd788"
  },
  "id": "lBpmbXcq6UBnMRkB",
  "tags": []
}